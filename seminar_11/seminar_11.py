from time import time
"""–ó–∞–¥–∞–Ω–∏–µ No1
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å –ú–æ—è –°—Ç—Ä–æ–∫–∞, –≥–¥–µ:
üìå –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ str
üìå –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∏–º—è –∞–≤—Ç–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (time.time)"""

class MyString(str):
    """Creates string object with extra attributes such as name and creation_time."""
    def __init__(self, value: str, name: str):
        self.name = name
        self.creation_time = time()

    def __new__(cls, value: str, name: str):
        instance = super().__new__(cls, value)
        return instance


"""–ó–∞–¥–∞–Ω–∏–µ No2
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä—É —Å–≤–æ–∏ÃÜ—Å—Ç–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ –∏ —Å—Ç—Ä–æ–∫—É.
üìå –ü—Ä–∏ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞, —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞—Ä—É —Å–ø–∏—Å–∫–æ–≤- –∞—Ä—Ö–∏–≤–æ–≤
üìå list-–∞—Ä—Ö–∏–≤—ã —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è —Å–≤–æ–∏ÃÜ—Å—Ç–≤–∞–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""

"""–ó–∞–¥–∞–Ω–∏–µ No3
üìå –î–æ–±–∞–≤—å—Ç–µ –∫ –∑–∞–¥–∞—á–∞–º 1 –∏ 2 —Å—Ç—Ä–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤."""

"""–ó–∞–¥–∞–Ω–∏–µ No4
üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∫–ª–∞—Å—Å –ê—Ä—Ö–∏–≤ –∏–∑ –∑–∞–¥–∞—á–∏ 2.
üìå –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

class Archive:
    """Archives the numbers and strings given into two lists int_archive and str_archive, respectively."""
    int_archive = []
    str_archive = []
    def __init__(self, num: int, string: str):
        self.num = num
        self.string = string
        self.int_archive.append(num)
        self.str_archive.append(string)

    def __str__(self):
        return (f"Instance of Archive class with instance attributes {self.num=} and {self.string=}, and class attributes"
                f"\n{self.int_archive=} \n{self.str_archive=}")

    def __repr__(self):
        return f"Archive({self.num=}, {self.string=})"


"""–ó–∞–¥–∞–Ω–∏–µ No5
üìå –î–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞.
üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ª–æ–∂–µ–Ω–∏—è –∏ –≤—ã—á–∏—Ç–∞–Ω–∏—è.
üìå –ü—Ä–∏ —ç—Ç–æ–º –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–∏ÃÜ —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
üìå –°–∫–ª–∞–¥—ã–≤–∞–µ–º –∏ –≤—ã—á–∏—Ç–∞–µ–º –ø–µ—Ä–∏–º–µ—Ç—Ä—ã, –∞ –Ω–µ –¥–ª–∏–Ω–Ω—É –∏ —à–∏—Ä–∏–Ω—É.
üìå –ü—Ä–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–∏ÃÜ—Ç–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ."""

class Rectangle:
    def __init__(self, length: float, width: float=None):
        self.length = length
        self.width = width

        if self.width is None:
            self.width = self.length

    def perimeter(self):
        return self.width * 2 + self.length * 2

    def area(self):
        return self.width * self.length

    def __add__(self, other):
        """Subtract the perimeters of two rectangles and return a new rectangle."""
        if not isinstance(other, Rectangle):
            raise TypeError("Can only subtract two Rectangle objects.")

        total_perimeter = self.perimeter() + other.perimeter()

        new_length = self.length # keeping the same length as the original
        new_width = (total_perimeter / 2) - new_length
        return Rectangle(new_length, new_width)

    def __sub__(self, other):
        """Subtract the perimeters of two rectangles and return a new rectangle."""
        if not isinstance(other, Rectangle):
            raise TypeError("Can only subtract two Rectangle objects.")

        # Calculate the difference of the perimeters, ensuring it's not negative
        perimeter_diff = max(0, self.perimeter - other.perimeter)

        # Create a new rectangle using the new perimeter
        new_length = self.length  # keeping the same length as the original
        new_width = max(0, (perimeter_diff / 2) - new_length)  # adjusting width

        return Rectangle(new_length, new_width)

    def __eq__(self, other):
        return self.area() == other.area()
    def __ne__(self, other):
        return self.area() != other.area()
    def __le__(self, other):
        return self.area() <= other.area()
    def __ge__(self, other):
        return self.area() >= other.area()
    def __lt__(self, other):
        return self.area() < other.area()
    def __gt__(self, other):
        return self.area() > other.area()












if __name__ == '__main__':
    """Problem 1 Practice Run:"""
    # my_string = MyString('Hello!', 'Valeria')
    # print(my_string.creation_time, my_string.name)
    # print(my_string)
    # my_string2 = MyString('Hi!', 'Sergey')
    # print(my_string.creation_time, my_string.name)
    # print(my_string)

    """Problem 2 Practice Run:"""
    # arch_1 = Archive(3, 'Three')
    # arch_2 = Archive(4, 'Four')
    # arch_3 = Archive(5, 'Five')
    # print(arch_2.int_archive, arch_2.str_archive)

    """Problem 4 Practice Run:"""
    # arch_1 = Archive(3, 'Three')
    # arch_2 = Archive(4, 'Four')
    # arch_3 = Archive(5, 'Five')
    # print(arch_1.__str__())
    # print(arch_1.__repr__())








