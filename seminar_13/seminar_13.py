"""–ó–∞–¥–∞–Ω–∏–µ No1
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –æ–Ω –Ω–µ –≤–≤–µ–¥–µÃà—Ç —Ü–µ–ª–æ–µ –∏–ª–∏
–≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ.
üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–∏ÃÜ—Ç–µ –Ω–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""

import json


def get_num():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –æ–Ω –Ω–µ –≤–≤–µ–¥–µÃà—Ç —Ü–µ–ª–æ–µ –∏–ª–∏
    –≤–µ—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ."""
    while True:
        try:
            num = float(input("Enter a number: "))
            break
        except ValueError:
            print(f"Error! That's not a number.")


"""–ó–∞–¥–∞–Ω–∏–µ No2
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–æ–≥ get –¥–ª—è —Å–ª–æ–≤–∞—Ä—è.
üìå –ü–æ–º–∏–º–æ —Å–∞–º–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–ª—é—á –∏
–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
üìå –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª—é—á—É —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
üìå –†–µ–∞–ª–∏–∑—É–∏ÃÜ—Ç–µ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ÃÜ."""


def get_value(dictionary, key, default_value):
    try:
        return dictionary[key]
    except KeyError as e:
        print(f"Key {e} doesn't exist, default value returned.")
        return default_value


"""–ó–∞–¥–∞–Ω–∏–µ No3
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å —Å –±–∞–∑–æ–≤—ã–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –¥–æ—á–µ—Ä–Ω–∏–µ –∫–ª–∞—Å—Å—ã- –∏—Å–∫–ª—é—á–µ–Ω–∏—è:
‚óã –æ—à–∏–±–∫–∞ —É—Ä–æ–≤–Ω—è,
‚óã –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞."""


"""–ó–∞–¥–∞–Ω–∏–µ No4
üìå –í—Å–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–µ–º–∏–Ω–∞—Ä–∞ 8 –ø—Ä–æ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö, –≥–¥–µ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∏–º—è, –ª–∏—á–Ω—ã–∏ÃÜ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä 
–∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç 1 –¥–æ 7) —Å–æ—Ö—Ä–∞–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–∏ÃÜ–ª.
üìå –ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ —Ö—Ä–∞–Ω–∏—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–∏ÃÜ—Å—Ç–≤–∞—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
üìå –û—Ç–¥–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–∏ÃÜ–ª–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–∏ÃÜ."""

import json
from pathlib import Path

class EntryError(Exception):
    pass

class LevelError(EntryError):
    def __init__(self, level, my_level):
        self.level = level
        self.my_level = my_level

    def __str__(self):
        return f"Access level {self.level} is less than required level {self.my_level}."

class AccessError(EntryError):
    def __str__(self):
        return "Access Denied."

class User:
    def __init__(self, name, _id, level):
        self.name = name
        self._id = _id
        self.level = int(level)  # Ensure level is stored as an integer

    def __eq__(self, other):
        return isinstance(other, User) and self._id == other._id

    def __hash__(self):
        return hash(self._id)

    def __str__(self):
        return f"User(name={self.name}, _id={self._id}, level={self.level})"


def json_read(file_path):
    with open(file_path, mode='r', encoding='utf-8') as json_f:
        data = json.load(json_f)

    users = set()
    for level, dict_id_name in data.items():
        for _id, name in dict_id_name.items():
            users.add(User(name, _id, int(level)))  # Convert level to integer

    return users


class Project:
    def __init__(self):
        self.user = User("Kieran", 23, 5)
        self.users = set()

    def json_read(self, file: Path):
        with open(file, mode='r', encoding='utf-8') as json_f:
            data = json.load(json_f)

        for level, dict_id_name in data.items():
            for _id, name in dict_id_name.items():
                self.users.add(User(name, _id, int(level)))  # Convert level to integer

    def enter_system(self, name, _id):
        possible_user = User(name, _id, level=0)  # Set level to any default integer
        if possible_user not in self.users:
            raise AccessError
        else:
            for user in self.users:
                if user._id == _id:
                    if user.level < self.user.level:
                        raise LevelError(user.level, self.user.level)
                    return f"Welcome, {user.name}!"  # Success message if access is granted


if __name__ == "__main__":
    """Problem 1"""
    # get_num()
    # help(get_num)

    """Problem 2"""
    # sample_dict = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}
    # print(get_value(sample_dict, 'one', 0))

    """Problem 4"""
    # user_1 = User("Sergey", 1, 5)
    # users = json_read("/Users/valeriaivanova/PycharmProjects/testPythonProject/seminar_8/name_level_id.json")
    # print(*users)

    """Problem 5"""
    project_1 = Project()
    project_1.json_read(Path("/Users/valeriaivanova/PycharmProjects/testPythonProject/seminar_8/name_level_id.json"))
    print(*project_1.users)
    project_1.enter_system("Sergey", "25")










