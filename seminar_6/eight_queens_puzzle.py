"""
Добавьте в пакет, созданный на семинаре шахматный модуль. Внутри него напишите код, решающий задачу о 8 ферзях.
Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга. Вам дана расстановка 8 ферзей
на доске, определите, есть ли среди них пара бьющих друг друга. Программа получает на вход восемь пар чисел,
каждое число от 1 до 8 - координаты 8 ферзей. Если ферзи не бьют друг друга верните истину, а если бьют - ложь.
"""

__all__ = ['are_queens_safe']


def are_queens_safe(queens_positions: list[tuple[int, int]]) -> bool:
    """
    Проверяет, находятся ли ферзи в безопасных позициях (не угрожают друг другу).

    :param queens_positions: Список пар (x, y), где каждая пара — это координаты ферзя на доске 8x8.
    :return: True, если ферзи не угрожают друг другу, False — если угрожают.
    """
    # Проверка уникальности для каждой горизонтали, вертикали и диагонали
    rows = set()
    cols = set()
    main_diagonals = set()  # x - y для главной диагонали
    secondary_diagonals = set()  # x + y для побочной диагонали

    for x, y in queens_positions:
        if x in rows or y in cols or (x - y) in main_diagonals or (x + y) in secondary_diagonals:
            return False  # Если ферзи находятся на одной линии или диагонали

        rows.add(x)
        cols.add(y)
        main_diagonals.add(x - y)
        secondary_diagonals.add(x + y)

    return True


if __name__ == '__main__':
    # Пример правильной расстановки
    queens = [(1, 5), (2, 8), (3, 6), (4, 3), (5, 1), (6, 7), (7, 2), (8, 4)]
    print(are_queens_safe(queens))  # True

    # Пример расстановки, где ферзи угрожают друг другу
    queens = [(1, 5), (2, 8), (3, 6), (4, 3), (5, 5), (6, 7), (7, 2), (8, 4)]
    print(are_queens_safe(queens))  # False
