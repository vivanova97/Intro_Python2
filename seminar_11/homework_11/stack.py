"""Задача 4. Стек
В программировании нередко необходимо создавать свои собственные структуры данных на основе уже существующих.
Одной из таких базовых структур является стек.
Стек — это абстрактный тип данных, представляющий собой список элементов, организованных по принципу
LIFO (англ. last in — first out, «последним пришёл — первым вышел»).
Простой пример: стек из книг на столе. Единственной книгой, обложка которой видна, является самая верхняя.
Чтобы получить доступ, например, к третьей снизу книге, нам нужно убрать все книги, лежащие сверху, одну за другой.
Напишите класс, который реализует стек и его возможности (достаточно будет добавления и удаления элемента).

После этого напишите ещё один класс — «Менеджер задач». В менеджере задач можно выполнить команду «новая задача»,
в которую передаётся сама задача (str) и её приоритет (int). Сам менеджер работает на основе стека (не наследование).
При выводе менеджера в консоль все задачи должны быть отсортированы по следующему приоритету: чем меньше число,
тем выше задача.
Вот пример основной программы: manager = TaskManager() manager.new_task("сделать уборку", 4) manager.new_task("помыть
посуду", 4) manager.new_task("отдохнуть", 1) manager.new_task("поесть", 2) manager.new_task("сдать ДЗ", 2) print(manager)
Результат:
1 — отдохнуть
2 — поесть; сдать ДЗ
4 — сделать уборку; помыть посуду
Дополнительно: реализуйте также удаление задач и подумайте, что делать с дубликатами."""

"""Используйте словари для хранения задач. В классе TaskManager можно использовать словарь для хранения стеков задач, 
где ключом будет приоритет, а значением — стек задач с этим приоритетом."""


class Stack:
    def __init__(self):
        # Инициализация стека как пустого списка
        self.__stack = list()

    def is_empty(self):
        # Проверка, пуст ли стек
        return len(self.__stack) == 0

    def pop(self):
        # Извлечение элемента из стека, если он не пуст
        if self.is_empty():
            return None
        return self.__stack.pop()

    def push(self, item):
        # Добавление элемента в стек
        self.__stack.append(item)

    def top(self):
        # Получение верхнего элемента стека без удаления
        if self.is_empty():
            return None
        return self.__stack[-1]


class TaskManager:

    def __init__(self):
         self.tasks = dict()

    def new_task(self, task: str, priority: int):
        if priority not in self.tasks:
            self.tasks[priority] = Stack()
        self.tasks[priority].push(task)

    def remove_task(self, text):
        for stack in self.tasks.values():
            for







