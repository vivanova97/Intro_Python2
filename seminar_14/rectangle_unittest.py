"""–ó–∞–¥–∞–Ω–∏–µ No5
üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –ø–æ –û–û–ü –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ö—Ä–∞–Ω—è—â–∏–∏ÃÜ –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É, –∞ —Ç–∞–∫–∂–µ –≤—ã—á–∏—Å–ª—è—é—â—É—é –ø–µ—Ä–∏–º–µ—Ç—Ä, –ø–ª–æ—â–∞–¥—å –∏
–ø–æ–∑–≤–æ–ª—è—é—â–∏–∏ÃÜ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏ –≤—ã—á–∏—Ç–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –±–µ—Ä—è –∑–∞ –æ—Å–Ω–æ–≤—É –ø–µ—Ä–∏–º–µ—Ç—Ä.
üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ unittest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞."""


from seminar_11.seminar_11 import *
import unittest

class TestTriangle(unittest.TestCase):
    def setUp(self):
        self.test_rectangle_1 = Rectangle(5,3)
        self.test_rectangle_2 = Rectangle(4, 7)


    def test_valid_triangle_initialization(self):
        rectangle = Rectangle(5)
        self.assertEqual(rectangle.length, 5)
        self.assertEqual(rectangle.width, 5)

    def test_perimeter(self):
        self.assertEqual(self.test_rectangle_1.perimeter(), 16)

    def test_area(self):
        self.assertEqual(self.test_rectangle_1.area(), 15)

    def test__add__error(self):
        with self.assertRaises(TypeError) as e:
            self.test_rectangle_1 + 7
        self.assertEqual(str(e.exception), "Can only add two Rectangle objects.")

    def test__sub__error(self):
        with self.assertRaises(TypeError) as e:
            self.test_rectangle_1 - 7
        self.assertEqual(str(e.exception), "Can only subtract two Rectangle objects.")

    def test__ne__(self):
        self.assertNotEqual(self.test_rectangle_1, self.test_rectangle_2)
