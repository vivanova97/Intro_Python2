from typing import Callable
import random
from functools import wraps
import json

"""
–ó–∞–¥–∞–Ω–∏–µ No3
üìå –ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ json —Ñ–∞–∏ÃÜ–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–∏ÃÜ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. 
–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–∏ÃÜ–ª –¥–æ–ª–∂–µ–Ω —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.
üìå –ö–∞–∂–¥—ã–∏ÃÜ –∫–ª—é—á–µ–≤–æ–∏ÃÜ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–∏ÃÜ –∫–ª—é—á json —Å–ª–æ–≤–∞—Ä—è.
üìå –î–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
üìå –ò–º—è —Ñ–∞–∏ÃÜ–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–∏ÃÜ —Ñ—É–Ω–∫—Ü–∏–∏.
"""
def save_to_json_parameter_result(func: Callable):
    @wraps(func)
    def wrapper(*args, **kwargs):
        # Try loading existing data from the JSON file
        file_name = f'{func.__name__}.json'
        try:
            with open(file_name, 'r', encoding='utf-8') as f:
                json_dict = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            json_dict = {}

        # Save parameters and result
        key = f"args={args}, kwargs={kwargs}"
        if key not in json_dict:
            result = func(*args, **kwargs)  # Call the original function
            json_dict[key] = {
                'args': args,
                'kwargs': kwargs,
                'result': result
            }

            # Write to JSON file
            with open(file_name, mode='w', encoding='utf-8') as f:
                json.dump(json_dict, f, indent=2, ensure_ascii=False)

        return func(*args, **kwargs)  # Return original function's result

    return wrapper


@save_to_json_parameter_result
def test_func(*args):
    return sum(args)


"""–ó–∞–¥–∞–Ω–∏–µ No4
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.
üìå –ü–∞—Ä–∞–º–µ—Ç—Ä - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–∏ÃÜ —Ñ—É–Ω–∫—Ü–∏–∏."""

def run_times(num_: int=1):
    def deco(func: Callable):
        @wraps(func)
        def wrapper(*args, **kwargs):
            nonlocal num_
            result = None
            while num_:
                result = func(*args, **kwargs)
                num_-=1
            return result
        return wrapper
    return deco


@run_times(3)
def test_2func(*args):
    print(args)

"""
–ó–∞–¥–∞–Ω–∏–µ No1
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é-–∑–∞–º—ã–∫–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞:
‚óã –æ—Ç 1 –¥–æ 100 –¥–ª—è –∑–∞–≥–∞–¥—ã–≤–∞–Ω–∏—è,
‚óã –æ—Ç 1 –¥–æ 10 –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
üìå –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–æ—Å–∏—Ç —É–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫.
"""


def validate_and_randomize(func: Callable) -> Callable:
    @wraps(func)
    def wrapper(num: int, num_of_tries: int) -> Callable:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —á–∏—Å–µ–ª
        if not (1 <= num <= 100):
            print(f"–ß–∏—Å–ª–æ {num} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (1-100), –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ.")
            num = random.randint(1, 100)
        if not (1 <= num_of_tries <= 10):
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ {num_of_tries} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (1-10), –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ.")
            num_of_tries = random.randint(1, 10)
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        return func(num, num_of_tries)

    return wrapper



@run_times(2)
@save_to_json_parameter_result
@validate_and_randomize
def guess_num(num: int, num_of_tries: int):
    def guess_input():
        nonlocal num_of_tries
        while num_of_tries:
            guess = int(input('Enter a number: '))
            if guess == num:
                print('You got it!')
                return True
            else:
                num_of_tries -= 1
                print('Incorrect',('try again' if num_of_tries != 0 else ''))
            return False

    return guess_input()



if __name__ == '__main__':
    # test_2func(1,2,3)
    guess_num(100, 2)
    # test_func(i=1,hi=2,bye=3)
    # test_func(dog=3, hi=2, bye=3)
    # test_func(i=1, hi=2, why=3)

