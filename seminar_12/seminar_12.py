"""–ó–∞–¥–∞–Ω–∏–µ No1
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å-—Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ —Å—á–∏—Ç–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ k –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ.
üìå –ü–∞—Ä–∞–º–µ—Ç—Ä k –ø–µ—Ä–µ–¥–∞–µÃà—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
üìå –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–Ω–µ–µ –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ –∏ –∏—Ö —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤."""


"""–ó–∞–¥–∞–Ω–∏–µ No2
üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á—É 1.
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ JSON —Ñ–∞–∏ÃÜ–ª."""

from collections import deque
import json


class Factorial:
    def __init__(self, k: int, file_name: str = None):
        # Initialize with a max history of k
        self.k = k
        self._history = deque(maxlen=k)  # Deque to store the last k factorials
        self.file_name = file_name or 'history'
        self.json_object = None

    def __call__(self, num: int):
        # Compute the factorial of the number
        result = 1
        if num == 0 or num == 1:
            result = 1
        else:
            for i in range(2, num + 1):
                result *= i

        # Store the result in history as a tuple (num, result)
        self._history.append((num, result))

        return result

    @property
    def history(self):
        """Return the history of the last k factorial calculations"""
        return dict(self._history)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_type:
            print(f"Exception occurred: {exc_value}")
            return False  # Re-raise the exception

            # Write the history to a JSON file upon exiting the context
        try:
            with open(self.file_name, 'w', encoding='utf-8') as f:
                json.dump(self.history, f)
        except Exception as e:
            print(f"Failed to write to file: {e}")
            return False  # Re-raise the exception
        return True


"""–ó–∞–¥–∞–Ω–∏–µ No3
üìå –°–æ–∑–¥–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
üìå –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –≤
–¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç start –¥–æ stop —Å —à–∞–≥–æ–º step.
üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å—á–∏—Ç–∞–µ–º step=1.
üìå –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º start=1."""

# class FactorialGenerator:
#     def __init__(self, stop: int, start: int=1, step: int=1):
#         self.start = start
#         self.stop = stop
#         self.step = step
#         self.current_num = start
#         self.result = 1
#
#     def __iter__(self):
#         self.result = 1
#         return self
#
#     def __next__(self):
#         result = 1
#
#         if self.start <= self.current_num <= self.stop:
#             if self.current_num == 0 or self.current_num == 1:
#                 self.current_num += self.step
#                 return result
#             else:
#                 for i in range(1, self.current_num + 1):
#                     result *= i
#                 self.current_num += self.step
#                 return result
#
#         raise StopIteration

class FactorialGenerator:
    def __init__(self, stop: int, start: int = 1, step: int = 1):
        self.start = start
        self.current = start
        self.stop = stop
        self.step = step
        self.result = 1

    def __iter__(self):
        # –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è `start`
        self.result = 1
        for i in range(1, self.current + 1):
            self.result *= i
        return self

    def __next__(self):
        if self.current > self.stop:
            raise StopIteration

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
        current_value = self.current
        current_factorial = self.result

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        self.current += self.step
        for i in range(current_value + 1, self.current + 1):
            self.result *= i

        return current_value, current_factorial


"""–ó–∞–¥–∞–Ω–∏–µ No4
üìå –î–æ—Ä–∞–±–æ—Ç–∞–∏ÃÜ—Ç–µ –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö —Å–µ–º–∏–Ω–∞—Ä–æ–≤.
üìå –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω—è—Ç—å –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –∏ –≤—Å—Ç—Ä–æ–∏ÃÜ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–∏ÃÜ 
(–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö).
üìå –ò—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã —Å–≤–æ–∏ÃÜ—Å—Ç–≤."""

""""–ó–∞–¥–∞–Ω–∏–µ No5
üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏ –¥–æ–±–∞–≤–∏–º —ç–∫–æ–Ω–æ–º–∏—é –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–æ–∏ÃÜ—Å—Ç–≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–µ–∑ —Å–ª–æ–≤–∞—Ä—è __dict__."""

class Rectangle:
    __slots__ = ('_length', '_width')

    def __init__(self, length: float, width: float=None):
        self.length = length
        self.width = length or width

    def perimeter(self):
        return self._width * 2 + self._length * 2

    def area(self):
        return self._width * self._length

    @property
    def length(self):
        return self._length

    @property
    def width(self):
        return self._width

    @length.setter
    def length(self, value):
        if value <= 0:
            raise ValueError("Length should be a positive number.")
        self._length = value

    @width.setter
    def width(self, value):
        if value <= 0:
            raise ValueError("Length should be a positive number.")
        self._width = value


    def __add__(self, other):
        """Subtract the perimeters of two rectangles and return a new rectangle."""
        if not isinstance(other, Rectangle):
            raise TypeError("Can only subtract two Rectangle objects.")

        total_perimeter = self.perimeter() + other.perimeter()

        new_length = self._length # keeping the same length as the original
        new_width = (total_perimeter / 2) - new_length
        return Rectangle(new_length, new_width)

    def __sub__(self, other):
        """Subtract the perimeters of two rectangles and return a new rectangle."""
        if not isinstance(other, Rectangle):
            raise TypeError("Can only subtract two Rectangle objects.")

        # Calculate the difference of the perimeters, ensuring it's not negative
        perimeter_diff = max(0, self.perimeter - other.perimeter)

        # Create a new rectangle using the new perimeter
        new_length = self._length  # keeping the same length as the original
        new_width = max(0, (perimeter_diff / 2) - new_length)  # adjusting width

        return Rectangle(new_length, new_width)

    def __eq__(self, other):
        return self.area() == other.area()
    def __ne__(self, other):
        return self.area() != other.area()
    def __le__(self, other):
        return self.area() <= other.area()
    def __ge__(self, other):
        return self.area() >= other.area()
    def __lt__(self, other):
        return self.area() < other.area()
    def __gt__(self, other):
        return self.area() > other.area()

rectangle_1 = Rectangle(length=2)


"""–ó–∞–¥–∞–Ω–∏–µ No6
üìå –ò–∑–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞.
üìå –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä—É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—Ö –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É –Ω–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–∏ÃÜ —Ä–∞–∑–º–µ—Ä–∞."""

class PositiveNum:
    def __init__(self):
        pass

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)

    def __set__(self, instance, value):
        self.validate_input(value)
        setattr(instance, self.param_name, value)

    def validate_input(self, value):
        if not isinstance(value, int):
            raise TypeError(f"{self.param_name} should be type int not {type(value)}.")
        if value < 0:
            raise ValueError(f"{self.param_name} should be a positive integer.")



# if __name__ == '__main__':
#     factorial_5 = Factorial(3)
#     print(factorial_5(1))
#     print(factorial_5(6))
#     print(factorial_5(7))
#     print(factorial_5.history)
#     print(factorial_5(8))
#     print(factorial_5.history)
#     with factorial_5 as f5:
#         json.dump(factorial_5.history, f5)






