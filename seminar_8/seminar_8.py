import csv
import json
import pickle
from imghdr import test_pbm
from pathlib import Path

""""
üìå –í—Å–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–¥–∞—á—É 3 –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞. –ú—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–∏ÃÜ —Ñ–∞–∏ÃÜ–ª —Å –ø—Å–µ–≤–¥–æ –∏–º–µ–Ω–∞–º–∏ –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º —á–∏—Å–µ–ª.
üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µÃà—Ç –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ —Ñ–∞–∏ÃÜ–ª–∞ –Ω–æ–≤—ã–∏ÃÜ —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
üìå –ò–º–µ–Ω–∞ –ø–∏—à–∏—Ç–µ —Å –±–æ–ª—å—à–æ–∏ÃÜ –±—É–∫–≤—ã.
üìå –ö–∞–∂–¥—É—é –ø–∞—Ä—É —Å–æ—Ö—Ä–∞–Ω—è–∏ÃÜ—Ç–µ —Å –Ω–æ–≤–æ–∏ÃÜ —Å—Ç—Ä–æ–∫–∏.
"""
def txt_file_to_json():
    with (
        open('../seminar_7/practice.txt', mode='r', encoding='utf-8') as txt_f,
        open('new_file.json', mode='w', encoding='utf-8') as json_f
    ):
        txt_file_dict = dict()

        for line in txt_f:
            key, value = line.strip('\n').split('|')
            txt_file_dict[key] = value

        json.dump(txt_file_dict, json_f, ensure_ascii=False, indent=2)

"""
üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è, –ª–∏—á–Ω—ã–∏ÃÜ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ (–æ—Ç 1 –¥–æ 7).
üìå –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–≤–æ–¥–∞ –¥–æ–±–∞–≤–ª—è–∏ÃÜ—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–∞–∏ÃÜ–ª.
üìå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞.
üìå –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–ª—é—á–µÃà–º –¥–ª—è –∏–º–µ–Ω–∏.
üìå –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞.
üìå –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–∏ÃÜ–ª –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è.
"""
def add_to_json_file():

    json_dict = dict()
    while True:
        name = input('Please enter your name: ')
        id_ = input('Please enter your id: ')
        level = int(input('Please enter level of authentication: '))

        if level not in json_dict:
            json_dict[level] = {}

        json_dict[level][id_] = name

        with open('name_level_id.json', mode='w', encoding='utf-8') as json_f:
            json.dump(json_dict, json_f, ensure_ascii=False, indent=2)


"""üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–∏ÃÜ –≤ –ø—Ä–æ—à–ª–æ–º –∑–∞–¥–∞–Ω–∏–∏ —Ñ–∞–∏ÃÜ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV."""
def save_json_to_csv():
    with (
        open('name_level_id.json', mode='r', encoding='utf-8') as json_f,
        open('name_level_id.csv', mode='w', newline='', encoding='utf-8') as csv_f
    ):
        json_dict = json.load(json_f)
        csv_write = csv.DictWriter(csv_f, fieldnames=['level','id','name'])

        csv_write.writeheader()

        for level, dict_ in json_dict.items():
            for id_, name in dict_.items():
                dict_for_csv = dict()
                dict_for_csv["level"] = level
                dict_for_csv["id"] = id_
                dict_for_csv["name"] = name
                csv_write.writerow(dict_for_csv)


def csv_to_json_using_csv_reader(csv_file_path: str, json_file_path: str):
    """
    üìå –ü—Ä–æ—á–∏—Ç–∞–∏ÃÜ—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–∏ÃÜ –≤ –ø—Ä–æ—à–ª–æ–º –∑–∞–¥–∞–Ω–∏–∏ csv —Ñ–∞–∏ÃÜ–ª –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è csv.DictReader.
    üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ id –¥–æ 10 —Ü–∏—Ñ—Ä –Ω–µ–∑–Ω–∞—á–∞—â–∏–º–∏ –Ω—É–ª—è–º–∏.
    üìå –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞.
    üìå –ü–æ–ª—É—á–∏–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ json —Ñ–∞–∏ÃÜ–ª, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ csv —Ñ–∞–∏ÃÜ–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–∏ÃÜ json —Å–ª–æ–≤–∞—Ä—å.
    üìå –ò–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ñ–∞–∏ÃÜ–ª–æ–≤ –ø–µ—Ä–µ–¥–∞–≤–∞–∏ÃÜ—Ç–µ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.

    :param csv_file_path: path to csv_file
    :parm json_file_path: path to csv_file
    """

    with (
        open(csv_file_path, mode='r', encoding='utf-8', newline='') as csv_f,
        open(json_file_path, mode='w', encoding='utf-8') as json_f
    ):
        csv_read = csv.reader(csv_f)
        json_list = []
        headers = next(csv_read)

        for index, line in enumerate(csv_read):
            json_dict = dict(zip(headers,line))
            json_dict['id'] = str(json_dict['id']).zfill(10)
            json_dict['hash'] = hash(f'{json_dict['name']}{json_dict['id']}')
            json_list.append(json_dict)

        json.dump(json_list, json_f, ensure_ascii=False, indent=2)


csv_to_json_using_csv_reader(csv_file_path='name_level_id.csv', json_file_path='name_level_id_2.json')

"""üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç json —Ñ–∞–∏ÃÜ–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–∏ÃÜ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–∏–º–µÃà–Ω–Ω—ã—Ö 
pickle —Ñ–∞–∏ÃÜ–ª–æ–≤."""

def convert_all_json_to_pickle(directory_path: str):
    for i, path in enumerate(Path(directory_path).rglob('*.json'),1):
        with (
            open(path, mode='r', encoding='utf-8') as json_f,
            open(f'new_file{i}.pickle', mode='wb') as pickle_f
        ):
           temp_dict = json.load(json_f)
           pickle.dump(temp_dict,pickle_f)


"""
–ó–∞–¥–∞–Ω–∏–µ No6
üìå –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç pickle —Ñ–∞–∏ÃÜ–ª —Ö—Ä–∞–Ω—è—â–∏–∏ÃÜ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–∏ÃÜ –≤ —Ç–∞–±–ª–∏—á–Ω—ã–∏ÃÜ csv —Ñ–∞–∏ÃÜ–ª.
üìå –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤–æ–∑—å–º–∏—Ç–µ pickle –≤–µ—Ä—Å–∏—é —Ñ–∞–∏ÃÜ–ª–∞ –∏–∑ –∑–∞–¥–∞—á–∏ 4 —ç—Ç–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞.
üìå –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∏ÃÜ–ª–∞.
"""
def convert_pickle_to_csv(pickle_file_path: str, csv_file_path: str):

    with (
        open(f'{pickle_file_path}', mode='rb') as pickle_f,
        open(f'{csv_file_path}', mode='w', encoding='utf-8', newline='') as csv_f
    ):
        pickle_file_list = pickle.load(pickle_f)
        csv_write = csv.DictWriter(csv_f, fieldnames=[key for key in pickle_file_list[0].keys()],
                                   quoting=csv.QUOTE_NONNUMERIC)
        csv_write.writeheader()
        for dictionary in pickle_file_list:
            csv_write.writerow(dictionary)


"""
–ó–∞–¥–∞–Ω–∏–µ No7
üìå –ü—Ä–æ—á–∏—Ç–∞–∏ÃÜ—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–∏ÃÜ –≤ –ø—Ä–æ—à–ª–æ–º –∑–∞–¥–∞–Ω–∏–∏ csv —Ñ–∞–∏ÃÜ–ª –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è csv.DictReader.
üìå –†–∞—Å–ø–µ—á–∞—Ç–∞–∏ÃÜ—Ç–µ –µ–≥–æ –∫–∞–∫ pickle —Å—Ç—Ä–æ–∫—É.
"""
def csv_to_pickle(csv_file_path: str):
    with open(f'{csv_file_path}', mode='r', encoding='utf-8', newline='') as csv_f:
        csv_read = csv.reader(csv_f, quoting=csv.QUOTE_NONNUMERIC)
        csv_as_pickle_str = pickle.dumps([line for line in csv_read])
        print(csv_as_pickle_str)


if __name__ == '__main__':
    pass
    # convert_all_json_to_pickle(f'{Path().cwd()}')
    # convert_pickle_to_csv('new_file1.pickle', 'new_file1.csv')
    # csv_to_pickle('new_file1.csv')
    # txt_file_to_json()
    # add_to_json_file()
    # save_json_to_csv()
    # csv_to_json_using_csv_reader(csv_file_path='name_level_id.csv', json_file_path='name_level_id_2.json')
    # with open('new_file.json', mode='r', encoding='utf-8') as json_f:
    #     new_dict = json.load(json_f) # turning json object into python object
    #     new_str = json.dumps(new_dict) # turning python object into json string object
    #     print(new_dict)
    #     print(new_str)